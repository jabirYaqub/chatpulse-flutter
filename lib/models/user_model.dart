/// A model class representing a user profile within the application.
///
/// This model contains all essential user information needed throughout the app,
/// including authentication details, display information, and presence status.
/// It serves as the central data structure for user accounts and is typically
/// used in user lists, chat interfaces, profiles, and authentication flows.
///
/// Example usage:
/// ```dart
/// final user = UserModel(
///   id: 'user_123',
///   email: 'john.doe@example.com',
///   displayName: 'John Doe',
///   photoURL: 'https://example.com/photos/john.jpg',
///   lastSeen: DateTime.now(),
///   createdAt: DateTime.now(),
/// );
/// ```
class UserModel {
  /// The unique identifier for the user.
  /// This is typically generated by the authentication service (Firebase Auth, etc.)
  /// and serves as the primary key for all user-related operations.
  /// Used to reference users in friendships, messages, and notifications.
  final String id;

  /// The user's email address.
  /// Used for authentication, account recovery, and optionally for notifications.
  /// Should be validated and unique across all users in the system.
  /// Consider privacy settings when displaying this to other users.
  final String email;

  /// The user's display name, used for public-facing profiles.
  /// This is what other users see in chat interfaces, friend lists, and search results.
  /// Should be sanitized for appropriate content and may have length restrictions.
  final String displayName;

  /// The URL to the user's profile picture.
  /// Can be a remote URL (from storage service) or an empty string for default avatar.
  /// When empty, the UI should display a placeholder or generated avatar.
  /// Should be validated to ensure it points to an image resource.
  final String photoURL;

  /// A boolean indicating the user's online status.
  /// True when the user has an active connection to the app.
  /// Should be updated in real-time using presence detection (e.g., Firebase Realtime Database).
  /// Used to show online indicators in friend lists and chat interfaces.
  final bool isOnline;

  /// The timestamp of the last time the user was seen active.
  /// Updated whenever the user performs an action or goes offline.
  /// Used to show "last seen" information when the user is offline.
  /// Can be used to implement "active within X minutes" features.
  final DateTime lastSeen;

  /// The timestamp when the user account was created.
  /// Used for account age verification, sorting users by join date,
  /// and potentially for implementing features restricted to new users.
  /// This value should never change after account creation.
  final DateTime createdAt;

  /// Creates a new instance of [UserModel].
  ///
  /// Required parameters:
  /// - [id]: Unique identifier from authentication service
  /// - [email]: User's email address for authentication
  /// - [displayName]: Public name shown to other users
  /// - [lastSeen]: Most recent activity timestamp
  /// - [createdAt]: Account creation timestamp
  ///
  /// Optional parameters with defaults:
  /// - [photoURL]: Profile picture URL, defaults to empty string
  /// - [isOnline]: Current online status, defaults to false
  ///
  /// Note: isOnline defaults to false as users are considered offline
  /// until their presence is explicitly confirmed.
  UserModel({
    required this.id,
    required this.email,
    required this.displayName,
    this.photoURL = '', // Empty string indicates no custom photo
    this.isOnline = false, // Users are offline by default
    required this.lastSeen,
    required this.createdAt,
  });

  /// Converts a [UserModel] instance into a map, typically for storing in a database.
  ///
  /// Serializes user data for storage in databases like Firestore or SQLite,
  /// or for transmission via APIs. DateTime objects are converted to milliseconds
  /// since epoch to ensure consistent storage across different platforms.
  ///
  /// Returns a Map<String, dynamic> that can be directly stored in most databases.
  ///
  /// Usage:
  /// ```dart
  /// final userMap = user.toMap();
  /// await firestore.collection('users').doc(user.id).set(userMap);
  /// ```
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'email': email,
      'displayName': displayName,
      'photoURL': photoURL,
      'isOnline': isOnline,
      'lastSeen': lastSeen.millisecondsSinceEpoch, // Convert to int for storage
      'createdAt': createdAt.millisecondsSinceEpoch, // Convert to int for storage
    };
  }

  /// Creates a [UserModel] instance from a map, typically for retrieving data from a database.
  ///
  /// This factory constructor deserializes user data from database queries,
  /// API responses, or authentication callbacks. It includes defensive programming
  /// to handle potentially incomplete or corrupted data gracefully.
  ///
  /// Parameters:
  /// - [map]: A Map containing user data from a database or authentication service
  ///
  /// Returns a new [UserModel] instance reconstructed from the map data.
  ///
  /// Note: Provides default values for all fields to prevent crashes from
  /// missing or null data. In production, consider logging or handling
  /// cases where required fields are missing.
  ///
  /// Usage:
  /// ```dart
  /// final snapshot = await firestore.collection('users').doc(userId).get();
  /// final user = UserModel.fromMap(snapshot.data()!);
  /// ```
  static UserModel fromMap(Map<String, dynamic> map) {
    return UserModel(
      // Default to empty string if ID is missing (consider validation in production)
      id: map['id'] ?? '',
      // Default to empty string for email (may want to validate email format)
      email: map['email'] ?? '',
      // Default to empty string for display name
      displayName: map['displayName'] ?? '',
      // Default to empty string indicating no profile photo
      photoURL: map['photoURL'] ?? '',
      // Default to offline status if not specified
      isOnline: map['isOnline'] ?? false,
      // Convert from milliseconds, defaulting to epoch if missing
      // Consider using current time as default for lastSeen in some cases
      lastSeen: DateTime.fromMillisecondsSinceEpoch(map['lastSeen'] ?? 0),
      // Convert from milliseconds, defaulting to epoch if missing
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] ?? 0),
    );
  }

  /// Creates a new [UserModel] instance by copying the existing one and optionally updating some fields.
  ///
  /// Implements the immutable update pattern essential for state management
  /// solutions like BLoC, Provider, or Riverpod. This ensures that state changes
  /// are properly detected and UI updates are triggered correctly.
  ///
  /// Common use cases:
  /// - Update online status: `user.copyWith(isOnline: true, lastSeen: DateTime.now())`
  /// - Change profile photo: `user.copyWith(photoURL: newPhotoUrl)`
  /// - Update display name: `user.copyWith(displayName: newName)`
  ///
  /// All parameters are optional. If not provided, the current instance's values are retained.
  ///
  /// Example:
  /// ```dart
  /// // Mark user as online
  /// final onlineUser = user.copyWith(
  ///   isOnline: true,
  ///   lastSeen: DateTime.now(),
  /// );
  ///
  /// // Update profile information
  /// final updatedUser = user.copyWith(
  ///   displayName: 'Jane Doe',
  ///   photoURL: 'https://example.com/new-photo.jpg',
  /// );
  /// ```
  ///
  /// Note: The id and createdAt fields typically shouldn't change after creation,
  /// but are included for completeness and special migration scenarios.
  UserModel copyWith({
    String? id,
    String? email,
    String? displayName,
    String? photoURL,
    bool? isOnline,
    DateTime? lastSeen,
    DateTime? createdAt,
  }) {
    return UserModel(
      // Use provided value if not null, otherwise keep current value
      id: id ?? this.id,
      email: email ?? this.email,
      displayName: displayName ?? this.displayName,
      photoURL: photoURL ?? this.photoURL,
      isOnline: isOnline ?? this.isOnline,
      lastSeen: lastSeen ?? this.lastSeen,
      createdAt: createdAt ?? this.createdAt,
    );
  }
}
